{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>

    <ul>
        <li><a href="{{ path(app.request.attributes.get('_route')) }}#kmom01">Kmom01</a></li>
        <li><a href="{{ path(app.request.attributes.get('_route')) }}#kmom02">Kmom02</a></li>
        <li><a href="{{ path(app.request.attributes.get('_route')) }}#kmom03">Kmom03</a></li>
    </ul>
    
    <h2 id="kmom01">Kmom01</h2>
    <p><b>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</b></p>
    <p>Jag har gått kursen oopython där vi fick arbeta objektorienterat. Där skapade vi exempelvis ett yahtzee spel. Det var mycket lärorikt. Utöver det har man i andra kursen kunnat återanvända sin kunskaper på området.</p>

    <p><b>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</b></p>
    <p>PHPs modell för klasser och objekt använder sig av klasser (class) för att skapa en mall för ett objekt. Och för att skapa en instans av ett objekt används new. Utöver detta bör man veta hur man ska hantera metoder i en klass, kunna använda inheritance etc. Utöver detta kan det vara värt att lära sig om public,private eller protected egenskaper eller metoder i klasser. I slutet av dagen liknar det mycket den objektorienterad kod vi skrivit i python och js. <p>
    
    <p><b>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</b></p>
    <p>Kodbasen är strukturerad på samma sätt som symfony mallen. Den fungerar bra eftersom projektet inte är storskaligt i min mening. Det är lätt att följa med i strukturen och det är enkelt att hitta de olika delarna av projektet. Jag kan tycka om kodbaser med "File-based routing", typ next.js. Symfony är dock mer fokuserat på back-end som jag förstår det, och att file-based routing mer funkar på en fullstack-ramverk. Jag tror det sannolikt kommer visa sig varför denna kodbas kommer fungera väl med MVC i senare kursmoment.</p>

    <p><b>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</b></p>
    <p>En sak som jag tyckte var intressant var att det stod att PHP var ett "“exception-light” programming language.". Jag har inte stött på denna term tidigare och hade inte heller noterat att PHP gör allt för att inte kasta errors och sluta köra, jämfört med exempelvis python. Om något är särskilt viktigt i artikeln lär det först vara PHPDOC delen, eftersom att kommentering av kod är essentiellt för att kunna underhålla en kodbas i framtiden. Och särskilt för PHP gäller att läsa delen om "Language Highlights", där dem visar på åtskilliga skillnader mot andra språk.</p>

    <p><b>Vilken är din TIL för detta kmom?</b></p>
    <p>Mitt TIL är symfony som vi fått sätta upp och starta oss att lära oss om. Det var kul att få återanvända TWIG och PHP för projektet som vi arbetat med förut.</p>

    <h2 id="kmom02">Kmom02</h2>
    <p><b>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</b></p>
    <p>Arv innebär i princip att en klass enkelt sagt ärver en annan klass. Man kan säga att den nya klassen bygger ut den andra. Detta använde jag när jag skapade CardGraphic. Den klassen ärver den vanliga card klassen men lägger till funktionalitet för att hämta ut en UNICODE karaktär som kan representera kortet på hemsidan. Komposition handlar i grunden om att en klass har andra klasser i sig. Exempelvis som i detta fall där en deck-of-cards består av 52 cards (ej räknat jokrar.). Interface har jag inte använt i detta kmom men det innebär i princip ett löfte om att en metod finns i klassen. Jag har inte heller använt trait men detta är omvänt från arv i princip. I ett trait kan man lägga metoder som sedan kan användas i flera klasser. Då behöver man bara ändra i traiten för att ändra funktionalitet i samtliga klasser som har den traiten. </p>

    <p><b>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?.</b></p>
    <p>Jag är faktiskt i det stora hela väldigt nöjd med min implementation. Mina klasser gick snabbt att faktiskt skriva och göra klart. Man har lärt sig mycket från tidigare kurser och det var kul att inte få så mycket hjälp utan att behöva tänka lite mera själv kring vilka metoder och liknande som kanske behövs. I varje controller gör jag först en liten helper check med om sessionen har ett deck, annars skapas ett nytt, som från starten är sorterad. Den är sorterad då om man skapar en instans av ett deck-of-cards skapar den korten i sorterat läge. Sedan blir det ganska simpelt att visa upp datan. Jag använder endast en template för att visa upp all data under card routen. Detta eftersom det endast behövs visas upp kort, antal kort kvar och de andra använder jag flash-meddelanden för. Jag är lite mindre nöjd med min ApiDeckController som hanterar alla api routes för detta kmom. Det blev bra i början men när jag insåg att jag behövde forms kändes filen lite lång och som att mycket bara skrevs om och om igen. Jag är dock mest nöjd med att jag faktiskt hade hittat symfony forms när jag skummade artikeln om "PHP Best Practices". Det gjorde forms så betydligt mycket lättare att använda i detta kmom, även om jag kanske borde stylat dessa lite... Utöver detta är jag faktiskt väldigt nöjd och det känns som man lär sig. Jag har även sätt till att faktiskt försöka committa bra commits enligt artikeln. Notera dock att jag endast använder UNICODE formattering på kortleken när den visas i HTML format, ej när den visas i JSON struktur eller liknande. Så i API'et får man endast exempelvis value: 1, suit: "Diamond".</p>

    <p><b>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</b></p>
    <p>Symfony känns som ett bra ramverk för PHP. Det känns mycket bra att man får med sig en del som jag förstår det av AbstractController som man kan ärva ifrån. Det blir ganska lätt att länka model och view på det sättet vi jobbar och det känns som ett språk med endå rimlig nivå. Att läsa symfonys dokumentation är även inte överkomplicerad och det är ett plus.</p>

    <p><b>Vilken är din TIL för detta kmom?</b></p>
    <p>Mitt TIL för detta kmom är nog hur man kan använda forms i symfony controller för att göra det enklare att hantera datan. Det blir en stooor skillnad. Utöver det är det att man fått lära sig mer om arv, komposition, interface och trait samt hur de faktiskt används. Jag måste även nämna artikeln om hur man committar bra commits. Den var mycket hjälpfull och man lärde sig mycket grundläggande saker.</p>

    <h2 id="kmom03">Kmom03</h2>
    <p><b>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</b></p>
    <p>Att modellera kortspelet i flödesdiagram och pseudokod hjälpte mycket. Jag tror att hjärnan gör detta även om man faktiskt inte gör det. Det är dock svårare att hålla reda på detta om man inte faktiskt ritar ut dessa. Man märker att det går att göra saker enklare om man redan innan har lagt ut exakt vad en funktion ska göra steg för steg till exempel och för kortspelet blev det likadant. Den lilla modelleringen jag gjorde är grunden för de klasser och applikationskod jag skapat.</p>

    <p><b>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</b></p>
    <p>Min implementation blev ganska bra. Jag höll mig till de klasser jag tänkte sedan innan. Det blev ganska mycket kod i min Game klass som är grunden för hela spelet. Jag hade sannolikt kunnat dela upp detta lite bättre. Kompositionen blev okej tror jag, däremot hade jag säkert kunnat gjort saker lite annorlunda. Jag blev nöjd med hur jag hanterade olika GameStates samt hur spelet fortskrider efter det startats. En förbättringsptential hade varit att visualisera spelets flöde på ett bättre sätt genom att låta korten dras långsammare och kanske med någon animation. När man spelar blir dealerns drag automatiska och det känns inte som påriktigt i nuläget.</p>

    <p><b>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</b></p>
    <p>Min känsla än så länge är att MVC är bra. Controllers blir lätta och istället får man tung applikationskod, som förhoppningsvis är lätt om man delar upp och skriver bra PHP-kod. Det blir ganska lätt att hålla reda på saker och ting och objektorienterad kod är något som jag tycker är kul. Det blir återanvändbart. Ibland tycker jag dock det är svårt att försöka göra saker på "det bästa sättet" men i slutändan fungerar det endå okej.</p>

    <p><b>Vilken är din TIL för detta kmom?</b></p>
    <p>Min TIL för detta kmom är hur man använder PHPSTAN och PHPMD. Samt vilka linting regler som gäller för dessa. Jag lyckades lösa allt till level 8. Utöver detta fick jag lära mig om dependency injection men jag lyckades inte komma på hur jag kunde använda detta i detta projekt. Min initiella tanke var att man kunde ha olika configs för kortleken, detta behövdes dock inte.</p>



    <h2 id="kmom04">Kmom04</h2>
    <p><b>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</b></p>
    <p>Det kändes ganska bra. Det blev lite samma sak som de unittest vi gjorde i objektorienterad python, om jag minns rätt. Jag upplever tester som centralt för en applikation, särskilt om man arbetar i ett team. De testerna jag skrev blev dock ganska simpla, keep it simple stupid. Jag använde inte mock-objekt grejen, vilket jag först såg att man kunde göra efteråt. Får ta och kolla lite på detta framöver. PHPUnit känns ganska simpelt, men jag har inte efterforskat överdrivet mycket ännu utan mest kollat på olika asserts.</p>

    <p><b>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</b></p>
    <p>Jag lyckades nå 100% kodtäckning av mina applikationsklasser. Notera dock att jag inte skrev kod under src/Card eller för mina controllers. Jag hade nämneligen gjort all kod för mitt spel i game, och det kändes lite dumt att göra om allt tester igen bara för att det finns en card klass i src/game och en i src/card. Att använda PHPUNIT och att i docs kunna se exakt hur ens coverage ser ut gjorde det väldigt enkelt. Man kunde direkt se vilka saker som inte testats. Däremot kanske detta gjorde att man glömde något speciellt edge-case för att man inte behövde tänka så mycket utan kunde se vad som var rött och vad som var grönt så att säga.</p>

    <p><b>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</b></p>
    <p>Min kod kändes väldigt testbar. Det enda problemet jag stötte på var att jag i min constructur för game startade spelet, vilket i sin tur shufflade korten. Därmed kunde jag inte skicka in kort till olika spelare på ett smidigt sätt. Det slutade med att jag istället inte callade metoden i constructorn och ändrade om flödet i programmet till att man behöver faktiskt calla startGame() för att få igång allting. Utöver detta insåg jag att jag sannolikt borde tänkt igenom mina klass metoder och liknande lite mer, sannolikt hade min game klass kunnat blivit refactorad väldigt mycket.</p>

    <p><b>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</b></p>
    <p>Jag skrev om lite saker. Bland annat i att startGame inte skickas in i constructorn utan måste köras själv. Detta står i linje med SINGLE RESPONSIBILITY regeln. Utöver detta kan jag ha gjort mindre ändringar men inga större refactoriseringar.</p>

    <p><b>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</b></p>
    <p>Jag tycker inte testbar kod i regel innebär snygg och ren kod. Men snygg och ren kod innebär oftast testbar kod eftersom det är enklare att testa kod som faktiskt går att förstå. Om man skriver komplicerad och oförståbar kod kommer man inte kunna tänka ut alla möjliga fall. Exempelvis har jag försökt att använda errors en del för att visualisera i koden vad vissa edgecases innebär, detta är något jag tycker i regel är snygg kod. Utöver detta menar jag att snygg kod är sådan kod som är uppdelad och inte överväldigande.</p>

    <p><b>Vilken är din TIL för detta kmom?</b></p>
    <p>TIL för detta kmom blir hur man kan använda PHPUNIT för att unittesta kod. Utöver detta har jag fått lära mig mer om PHPDocs och fixa en del linting problem med PHPSTAN och PHPMD.</p>

    <h2 id="kmom04">Kmom05</h2>
    <p>Redovisningstext...</p>

    <p><b>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</b></p>
    <p>Det gick bra att komma igån med Symfony och Doctrine. Särskilt eftersom mitt databasval blev sqlite. Det var enkelt att komma igång och det var enkelt att få till CRUD med Symfony forms och gets och posts routes. Doctrine var ganska simpelt, särskilt i och med övningen innan.</p>

    <p><b>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</b></p>
    <p>Jag gjorde det på det enklaste sättet, men det är också det sättet som känns normalast rent UX mässigt. Man kommer till landningssidan där kan man välja att se alla böcker eller skapa en bok. Om man klickar på skapa en bok får man upp ett formulär där man måste skriva in alla rader. Om man då skapar boken redicerats man till sidan där alla böcker finns i tablet. På denna sida (som går att nå via landningssidan) kan man se alla böcker i ett table och även en link till att skapa en till bok, som på landningssidan. Här kan man hovra med musen över en tr i tablet. Det blir en mouse hover effect och om man klickar kommer man till en read 1 view. Här kan man se mer data (bilden och isbn), härifrån kan man sedan välja att radera eller editta eller gå tillbaka. Om man klickar på radera kommer ett formulär för är du säker.. om man klickar edit får man upp ett formulär där man kan ändra allt förutom ISBN, vilket kändes som en reell lösning. Härifrån kan man sedan klicka uppdatera. Detta är mitt flöde. Om man vill ändra ISBN får man alltså radera och skapa en ny bok.</p>

    <p><b>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</b></p>
    <p>Det är enkelt att komma igång med crud i ORM. Jag har använt ORM förut i något sammanhang. Det blir enkelt och man behöver inte skriva så mycket boilerplate vilket jag tycker är en stor fördel. Som jag förstår det är dock en nackdel att man kanske inte lika enkelt kan göra komplicerade queries, men i övningen tyckte jag det såg ganska simpelt ut att göra egna SQL-queries i funktioner, något jag dock inte behövde här. Att jobba med RÅ-sql blir därför inte i realiteten ett bättre alternativ, särskilt när man kör CRUD, vilket endast kräver enkla queries där ORM gör det enkelt. </p>

    <p><b>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</b></p>
    <p>ORM är en bra mellanväg mellan typ stored procedures och rå-sql kod som jag fattar det. Stored procedures är ju bra för komplicerade saker, men då hamnar applikationskoden i SQL. ORM gör det som jag förstår det väldigt simpelt att använda sql för enkla och lätta transaktioner. Min uppfattning är att ORM oftast är det bästa när man inte behöver 'galen' sql kod.</p>

    <p><b>Vilken är din TIL för detta kmom?</b></p>
    <p>TIL för detta kmom blir doctrine och ORM i syfmony. Utöver detta fick jag uppdatera mig på SQLite och hur man använder CRUD i symfony.</p>

{% endblock %}